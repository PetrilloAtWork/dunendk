#include "services_dune.fcl"
#include "hitfindermodules_dune.fcl"
#include "cluster_dune.fcl"
#include "trackfindermodules_dune.fcl"
#include "pandoramodules.fcl"
##include "pandoramodules_dune.fcl"
#include "calorimetry_dune10kt.fcl"
#include "particleid.fcl"
#include "mctrutht0matching.fcl"
#include "t0reco.fcl"
#include "opticaldetectormodules_dune.fcl"
#include "trackshowerhits.fcl"
#include "showerfindermodules_dune.fcl"
#include "emshower3d.fcl"

process_name: newReco

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "reco_hist.root" }
  MemoryTracker:     {}
  TimeTracker:       {}
  RandomNumberGenerator: {} #ART native random number generator
  message:              @local::dune_message_services_prod_debug
  FileCatalogMetadata:  @local::art_file_catalog_mc
                        @table::dunefd_reco_services
}
#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
  saveMemoryObjectThreshold: 0
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
# random number saver
  calo:               @local::dune35t_calomc
  pmtrackNDK:             @local::dunefd_pmalgtrackmaker
  pmtrackNDKcalo:         @local::dune10kt_calomc
  pmtrackNDKpid:          @local::standard_chi2pid
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 reco: [ pmtrackNDK, pmtrackNDKcalo, pmtrackNDKpid ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "/dune/data/users/higuera/TrackCleaningData_Reco_merged/FinalNDK_reco.root"
   dataTier:    "full-reconstructed"
   compressionLevel: 1
   saveMemoryObjectThreshold: 0
 }
}
### Here, we overwrite ALL module labels with the ones defined above.
physics.producers.pmtrackNDKcalo.TrackModuleLabel:         "pmtrackNDK"
physics.producers.pmtrackNDKcalo.SpacePointModuleLabel:    "pmtrackNDK"
physics.producers.pmtrackNDKcalo.T0ModuleLabel:            ""
physics.producers.pmtrackNDKcalo.MakeTree:                 false

physics.producers.pmtrackNDK.HitModuleLabel:               "linecluster"
physics.producers.pmtrackNDK.ClusterModuleLabel:           "NDKReco"
physics.producers.pmtrackNDK.EmClusterModuleLabel:         "trkshowersplit"
physics.producers.pmtrackNDK.PMAlgTracking.RunVertexing:   true
physics.producers.pmtrackNDK.PMAlgTracking.FlipToBeam:     false
physics.producers.pmtrackNDK.PMAlgTracking.MinSeedSize2ndPass:  2
physics.producers.pmtrackNDK.PMAlgTracking.AutoFlip_dQdx: true

physics.producers.pmtrackNDKpid.CalorimetryModuleLabel:  "pmtrackNDKcalo"
physics.producers.pmtrackNDKpid.TrackModuleLabel:        "pmtrackNDK"
